@page "/login"
@using QuizAppBlazor.Client.DTOs
@using QuizAppBlazor.Client.Providers
@using QuizAppBlazor.Client.Services
@using System.ComponentModel.DataAnnotations
@layout LoginLayout
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider

<style>
    .login-background {
        min-height: 100vh;
        background: linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.6)), url('./background.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    .login-card {
        backdrop-filter: blur(10px);
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        border: 1px solid rgba(255, 255, 255, 0.18);
    }

    .login-title {
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        color: white;
        font-weight: bold;
    }

    .login-subtitle {
        color: #ff6b35;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        font-weight: bold;
    }
</style>

<div class="login-background">
    <div Class="d-flex align-center justify-center" Style="min-height: 100vh;">
        <MudItem xs="12" Class="d-flex align-center justify-center mud-width-full py-4">
            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                <h2 class="login-title">ĐĂNG NHẬP HỆ THỐNG</h2>
                <h1 class="login-subtitle">BẢO MẬT TRẮC NGHIỆM</h1>
            </MudStack>
        </MudItem>
        
        <MudItem xs="12" sm="12" Class="d-flex align-center justify-center py-2">
            <MudPaper Class="login-card pa-6" style="max-width: 450px; width: 100%;" Elevation="0">
            <EditForm Model="@model" OnValidSubmit="@LoginAsync">
                <DataAnnotationsValidator />
                
                <MudStack Spacing="4">
                    <MudTextField @bind-Value="model.Email" 
                                  Label="Email hoặc Nickname" 
                                  Variant="Variant.Outlined"
                                  For="@(() => model.Email)"
                                  HelperText="Nhập email hoặc nickname của bạn"
                                  Adornment="Adornment.Start" 
                                  AdornmentIcon="@personIcon" />

                    <MudTextField @bind-Value="model.Password" 
                                  Label="Mật khẩu" 
                                  Variant="Variant.Outlined"
                                  InputType="@passwordInputType"
                                  For="@(() => model.Password)"
                                  @onkeyup="@OnKeyPressAsync"
                                  Adornment="Adornment.End" 
                                  AdornmentIcon="@passwordIcon" 
                                  OnAdornmentClick="@TogglePasswordVisibility" />

                    <MudCheckBox @bind-Value="model.RememberMe" 
                                 Label="Ghi nhớ đăng nhập" 
                                 Color="Color.Primary" />

                    @if (isLoading)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    }

                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               Size="Size.Large"
                               FullWidth="true"
                               ButtonType="ButtonType.Submit"
                               Disabled="@isLoading">
                        @if (isLoading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Đang đăng nhập...</MudText>
                        }
                        else
                        {
                            <MudText>Đăng nhập</MudText>
                        }
                    </MudButton>

                    <MudDivider />

                    <MudButton Variant="Variant.Text" 
                               Color="Color.Primary" 
                               FullWidth="true"
                               OnClick="@NavigateToRegister">
                        Chưa có tài khoản? Đăng ký ngay
                    </MudButton>
                </MudStack>

                <ValidationSummary />
            </EditForm>
            </MudPaper>
        </MudItem>
    </div>
</div>


@code {
    private UserLoginDto model = new UserLoginDto();
    private bool isLoading = false;
    private bool isPasswordVisible = false;
    
    private InputType passwordInputType => isPasswordVisible ? InputType.Text : InputType.Password;
    private string passwordIcon => isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    private string personIcon => Icons.Material.Filled.Person;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User?.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/", true);
        }
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task OnKeyPressAsync(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await LoginAsync();
        }
    }

    private async Task LoginAsync()
    {
        if (isLoading) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            var user = await ApiService.LoginAsync(model);
            
            if (string.IsNullOrEmpty(user.Message))
            {
                // Store user info in localStorage
                await LocalStorage.SetItemAsync("token", user.BearerToken);
                await LocalStorage.SetItemAsync("role", user.Role);
                await LocalStorage.SetItemAsync("id", user.Id.ToString());
                await LocalStorage.SetItemAsync("email", user.Email);
                await LocalStorage.SetItemAsync("nickname", user.Nickname);

                // Update authentication state
                await Task.Run(() => ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user));
                
                Snackbar.Add("Đăng nhập thành công!", Severity.Success);
                
                // Redirect to home page
                Navigation.NavigateTo("/", true);
            }
            else
            {
                Snackbar.Add(user.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi kết nối: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }
}

