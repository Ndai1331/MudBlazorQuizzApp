@page "/questions-v2"
@using QuizAppBlazor.Client.DTOs
@using QuizAppBlazor.Client.HttpResponse
@using System.Threading
@using MudBlazor
@inherits BaseBlazorPage

<PageTitle>Quản lý câu hỏi</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudStack Spacing="4">
        <MudPaper Class="pa-4" Elevation="2">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h4" Color="Color.Primary">
                    <MudIcon Icon="Icons.Material.Filled.Quiz" Class="mr-2" />
                    Quản lý câu hỏi
                </MudText>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@NavigateToCreate">
                    Tạo câu hỏi mới
                </MudButton>
            </MudStack>
        </MudPaper>

        <MudPaper Class="pa-4" Elevation="1">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField T="string"
                                  Value="@searchString"
                                  ValueChanged="@OnSearch"
                                  Label="Tìm kiếm câu hỏi" 
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start" 
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Placeholder="Tìm kiếm theo ID, câu hỏi, đáp án..."
                                  Clearable="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudButton Class="mt-3"
                               Variant="Variant.Outlined" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Refresh"
                               OnClick="@(() => table.ReloadServerData())"
                               FullWidth="true">
                        Làm mới
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudPaper Class="pa-4" Elevation="1">
            <MudTable ServerData="ServerReload" 
                      Dense="true" 
                      Hover="true" 
                      Breakpoint="Breakpoint.Sm"
                      @ref="table">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Câu hỏi</MudTh>
                        <MudTh>Đáp án đúng</MudTh>
                        <MudTh>Loại</MudTh>
                        <MudTh>Thao tác</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Câu hỏi">
                            <MudText >
                                @context.Question
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Đáp án">
                            <MudText Style="max-width: 200px;">
                                @context.CorrectAnswer
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Loại">
                            @if (context.Type == QuestionTypeEnum.QD)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Info" Text="Quy định" />
                            }
                            else
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Success" Text="Bảo mật" />
                            }
                        </MudTd>
                        <MudTd DataLabel="Thao tác">
                            <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                               Color="Color.Info" 
                                               OnClick="@(() => ViewQuestion(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                               Color="Color.Primary" 
                                               OnClick="@(() => EditQuestion(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Color="Color.Error" 
                                               OnClick="@(() => DeleteQuestion(context))" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                <NoRecordsContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                        <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Size="Size.Large" Color="Color.Default" />
                        <MudText Typo="Typo.h6" Color="Color.Default">Không có câu hỏi nào</MudText>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="@NavigateToCreate">
                            Tạo câu hỏi đầu tiên
                        </MudButton>
                    </MudStack>
                </NoRecordsContent>
                
                <LoadingContent>
                    <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                        <MudText>Đang tải câu hỏi...</MudText>
                    </MudStack>
                </LoadingContent>
            </MudTable>
        </MudPaper>
    </MudStack>
</MudContainer>

@code {
    private IEnumerable<GetQuestionsDTO> pagedData = new List<GetQuestionsDTO>();
    private MudTable<GetQuestionsDTO> table = default!;
    private int totalItems;
    private string searchString = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        bool isLoggedIn = await IsAuthenticatedAsync();
        if (!isLoggedIn)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        
        await table.ReloadServerData();
        Http = await AttachToken();
    }

    /// <summary>
    /// Server-side data loading with pagination, sorting, and filtering
    /// </summary>
    private async Task<TableData<GetQuestionsDTO>> ServerReload(TableState state, CancellationToken token)
    {
        try
        {
            // Get all questions from API with current search string
            var result = await ApiService.GetQuestionsAsync(searchString, state.Page * state.PageSize, state.PageSize);
            pagedData = result.Result ?? new List<GetQuestionsDTO>();
            // Set total items for pagination
            totalItems = result.TotalRecords;
            
            return new TableData<GetQuestionsDTO>() 
            { 
                TotalItems = totalItems, 
                Items = pagedData 
            };
        }
        catch (Exception ex)
        {
            await ShowErrorAsync($"Lỗi tải dữ liệu: {ex.Message}");
            return new TableData<GetQuestionsDTO>() 
            { 
                TotalItems = 0, 
                Items = new List<GetQuestionsDTO>() 
            };
        }
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/questions/create-v2");
    }

    private void ViewQuestion(GetQuestionsDTO question)
    {
        // Simple navigation for now
        Navigation.NavigateTo($"/questions/view/{question.Id}");
    }

    private void EditQuestion(GetQuestionsDTO question)
    {
        Navigation.NavigateTo($"/questions/edit/{question.Id}");
    }

    private async Task DeleteQuestion(GetQuestionsDTO question)
    {
        bool confirmed = await ConfirmAsync(
            "Xác nhận xóa", 
            $"Bạn có chắc chắn muốn xóa câu hỏi: \"{question.Question}\"?"
        );

        if (confirmed)
        {
            try
            {
                var result = await ApiService.DeleteQuestionAsync(question.Id);
                
                if (string.IsNullOrEmpty(result.Result))
                {
                    await ShowSuccessAsync("Xóa câu hỏi thành công");
                    await table.ReloadServerData();
                }
                else
                {
                    await ShowErrorAsync($"Lỗi xóa câu hỏi: {result.Result}");
                }
            }
            catch (Exception ex)
            {
                await ShowErrorAsync($"Lỗi kết nối: {ex.Message}");
            }
        }
    }
}
