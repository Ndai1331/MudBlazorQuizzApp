@page "/register"
@using QuizAppBlazor.Client.DTOs
@using QuizAppBlazor.Client.Services
@using System.ComponentModel.DataAnnotations
@layout LoginLayout
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<style>
    .register-background {
        min-height: 100vh;
        background: linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.6)), url('./background.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    .register-card {
        backdrop-filter: blur(10px);
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        border: 1px solid rgba(255, 255, 255, 0.18);
    }

    .register-title {
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        color: white;
        font-weight: bold;
    }

    .register-subtitle {
        color: #ff6b35;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        font-weight: bold;
    }
</style>

<div class="register-background">
    <MudGrid Class="d-flex align-center justify-center" Style="min-height: 100vh;">
        <MudItem xs="12" Class="d-flex align-center justify-center mud-width-full py-4">
            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                <h2 class="register-title">ĐĂNG KÝ TÀI KHOẢN</h2>
                <h1 class="register-subtitle">BẢO MẬT TRẮC NGHIỆM</h1>
            </MudStack>
        </MudItem>
        
        <MudItem xs="12" sm="12" Class="d-flex align-center justify-center py-2">
            <MudPaper Class="register-card pa-6" style="max-width: 450px; width: 100%;" Elevation="0">
                <EditForm Model="@model" OnValidSubmit="@RegisterAsync">
                    <DataAnnotationsValidator />
                
                    <MudStack Spacing="4">
                        <MudTextField @bind-Value="model.Email" 
                                      Label="Email" 
                                      Variant="Variant.Outlined"
                                      For="@(() => model.Email)"
                                      HelperText="Email sẽ được sử dụng để đăng nhập"
                                      Adornment="Adornment.Start" 
                                      AdornmentIcon="Icons.Material.Filled.Email" />

                        <MudTextField @bind-Value="model.Nickname" 
                                      Label="Nickname" 
                                      Variant="Variant.Outlined"
                                      For="@(() => model.Nickname)"
                                      HelperText="Tên hiển thị của bạn (3-50 ký tự)"
                                      Adornment="Adornment.Start" 
                                      AdornmentIcon="Icons.Material.Filled.Person" />

                        <MudTextField @bind-Value="model.Password" 
                                      Label="Mật khẩu" 
                                      Variant="Variant.Outlined"
                                      InputType="@passwordInputType"
                                      For="@(() => model.Password)"
                                      HelperText="Ít nhất 8 ký tự, bao gồm chữ hoa, thường, số và ký tự đặc biệt"
                                      Adornment="Adornment.End" 
                                      AdornmentIcon="@passwordIcon" 
                                      OnAdornmentClick="@TogglePasswordVisibility" />

                        <MudTextField @bind-Value="confirmPassword" 
                                      Label="Xác nhận mật khẩu" 
                                      Variant="Variant.Outlined"
                                      InputType="@confirmPasswordInputType"
                                      HelperText="Nhập lại mật khẩu để xác nhận"
                                      Error="@(!string.IsNullOrEmpty(confirmPassword) && model.Password != confirmPassword)"
                                      ErrorText="Mật khẩu xác nhận không khớp"
                                      Adornment="Adornment.End" 
                                      AdornmentIcon="@confirmPasswordIcon" 
                                      OnAdornmentClick="@ToggleConfirmPasswordVisibility" />

                        @if (isLoading)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        }

                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   Size="Size.Large"
                                   FullWidth="true"
                                   ButtonType="ButtonType.Submit"
                                   Disabled="@(isLoading || model.Password != confirmPassword)">
                            @if (isLoading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Đang đăng ký...</MudText>
                            }
                            else
                            {
                                <MudText>Đăng ký</MudText>
                            }
                        </MudButton>

                        <MudDivider />

                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Primary" 
                                   FullWidth="true"
                                   OnClick="@NavigateToLogin">
                            Đã có tài khoản? Đăng nhập ngay
                        </MudButton>
                    </MudStack>

                    <ValidationSummary />
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>

</div>

@code {
    private UserLoginDto model = new UserLoginDto();
    private string confirmPassword = string.Empty;
    private bool isLoading = false;
    
    private bool isPasswordVisible = false;
    private bool isConfirmPasswordVisible = false;
    
    private InputType passwordInputType => isPasswordVisible ? InputType.Text : InputType.Password;
    private string passwordIcon => isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    
    private InputType confirmPasswordInputType => isConfirmPasswordVisible ? InputType.Text : InputType.Password;
    private string confirmPasswordIcon => isConfirmPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        isConfirmPasswordVisible = !isConfirmPasswordVisible;
    }

    private async Task RegisterAsync()
    {
        if (isLoading) return;

        if (model.Password != confirmPassword)
        {
            Snackbar.Add("Mật khẩu xác nhận không khớp", Severity.Warning);
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var result = await ApiService.RegisterAsync(model);
            
            if (string.IsNullOrEmpty(result.Result))
            {
                Snackbar.Add("Đăng ký thành công! Vui lòng đăng nhập.", Severity.Success);
                Navigation.NavigateTo("/login");
            }
            else
            {
                Snackbar.Add($"Đăng ký thất bại: {result.Result}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi kết nối: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
